group 'at.ac.tuwien.aic.group2.streamprocessing'
version '0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'slf4j-log4j12') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.21"
        }
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'log4j-slf4j-impl') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.21"
        }
    }
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'log4j') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.21"
        }
    }
}

/*configurations {
    includedInStormJar
    excludedFromStormJar.extendsFrom includedInStormJar
    compile.extendsFrom excludedFromStormJar
}*/

dependencies {
    compile (group: 'org.apache.kafka', name: 'kafka_2.11', version: '0.10.1.0') {
        exclude module: "zookeeper"
    }
    compile (group: 'org.apache.kafka', name: 'kafka-clients', version: '0.10.1.0') {
        exclude module: "zookeeper"
    }
    compile group: 'com.101tec', name: 'zkclient', version: '0.9'
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    compile group: 'org.apache.storm', name: 'storm-redis', version: '1.0.2'
    compile group: 'org.apache.storm', name: 'storm-core', version: '1.0.2'
    compile group: 'org.apache.storm', name: 'storm-kafka', version: '1.0.2'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'

    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'

    compile group: 'org.apache.curator', name: 'curator-framework', version: '3.2.0'
    compile group: 'org.apache.curator', name: 'curator-test', version: '3.2.0'

    compile group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    testCompile "org.mockito:mockito-core:1.+"

    /*excludedFromStormJar "org.apache.storm:storm-core:1.0.2"
    includedInStormJar "org.apache.storm:storm-redis:1.0.2"
    includedInStormJar "org.apache.storm:storm-kafka:1.0.2"
    includedInStormJar "org.apache.commons:commons-pool2:2.4.2"*/
}

checkstyle {
    configFile = new File(rootDir, "src/checkstyle/checkstyle.xml")
    toolVersion = "6.19"
}

test {
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
}

task runDataprovider(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "at.ac.tuwien.aic.streamprocessing.kafka.provider.DataProvider"

    if (project.hasProperty("data")) {
        if (project.hasProperty("speed")) {
            args project.getProperty("data"), "taxi", project.getProperty('speed')
        } else {
            args project.getProperty("data"), "taxi", "1"
        }
    } else {
        if (project.hasProperty("speed")) {
            args "./testdata/taxi_data.csv", "taxi", project.getProperty('speed')
        } else {
            args "./testdata/taxi_data.csv", "taxi", "1"
        }
    }
}

task runRedisMonitor(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "at.ac.tuwien.aic.streamprocessing.cli.RedisMonitor"

}

task runTopology (type: JavaExec){
    classpath sourceSets.main.runtimeClasspath
    main = "at.ac.tuwien.aic.streamprocessing.storm.TridentProcessingTopology"
}

task stormJar(type: Jar) {
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.excludedFromStormJar + configurations.includedInStormJar).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    with jar
}
